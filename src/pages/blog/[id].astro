---
import BasicLayout from "@layouts/basicLayout.astro"
import { getCollection, getEntries, render } from "astro:content"
import { css } from "@styled-system/css"
import "@fontsource-variable/roboto-serif"

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

// Let's call getCollection() inside of getStaticPaths() to have our collection data available for building static routes. Then, we create the individual URL paths using the id property of each content entry. Each page is passed the entire collection entry as a prop for use in your page template.
// - https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
  // Get all entries from blog collection except the offline:
  const posts = await getCollection("blogCollection", ({ data }) => {
    return data.offline !== true
  })

  // Creating and returning the static paths and props array:
  const staticPathsAndProps = posts.map((post) => {
    return {
      params: { id: post.id },
      props: { post },
    }
  })
  return staticPathsAndProps
}

// For a specific page, we get post data and render the content in a component called `Content`:
// - https://docs.astro.build/en/reference/modules/astro-content/#render
const { post } = Astro.props
const { Content } = await render(post)
// We also get the related categories of this post:
const relatedCategorias = await getEntries(post.data.relatedCategorias)
---

<BasicLayout
  title={"dveras em rede | " + post.data.titulo}
  description={post.data.descricao}
  url={canonicalURL.href}
>
  <article
    class={css({
      "&:not(&:last-child)": { borderBottom: "1px solid gray" },
      py: "40px",
    })}
  >
    <header>
      <div
        class={css({
          textStyle: "graySmallLabel",
        })}
      >
        {post.data.data_publicacao.toLocaleDateString("pt-BR")}
      </div>
      <h1
        class={css({
          textStyle: "h1Title",
          color: "basicText",
        })}
      >
        <a href={`/blog/${post.id}`}>{post.data.titulo}</a>
      </h1>
      <div class={css({ textStyle: "graySmallLabel" })}>
        {
          relatedCategorias.map(function (categoria, index) {
            // prettier-ignore
            //  (to avoid white-spaces in the inline element below)
            return (
                <span>{index ? ", " : ""}<a class={css({ textDecoration: "underline" })} href={`/categoria/${categoria.id}`}>{categoria.data.titulo}</a></span>
              )
          })
        }
      </div>
    </header>
    <div
      class={css({
        textStyle: "article",
        color: "basicText",
        mt: "20px",
      })}
    >
      <Content />
    </div>
  </article>
</BasicLayout>
