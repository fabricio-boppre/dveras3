---
import BasicLayout from "@layouts/basicLayout.astro"
import config from "@config/config.json"
import { getCollection, getEntries, render } from "astro:content"
import { css } from "@styled-system/css"
import { flex } from "@styled-system/patterns"
import { SocialShare, BlueskyShareButton } from "astro-social-share"

// Let's call getCollection() inside of getStaticPaths() to have our collection data available for building static routes. Then, we create the individual URL paths using the id property of each content entry. Each page is passed the entire collection entry as a prop for use in your page template.
// - https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
  // Get all entries from blog collection:
  const posts = await getCollection("blogCollection")

  // Creating and returning the static paths and props array:
  const staticPathsAndProps = posts.map((post) => {
    return {
      params: { id: post.id },
      props: { post },
    }
  })
  return staticPathsAndProps
}

// For a specific page, we get meta info, related categories of this post, post data and render the content in a component called `Content`:
// - https://docs.astro.build/en/reference/modules/astro-content/#render
const { post } = Astro.props
const { Content } = await render(post)
const siteTitle = config.siteTitle
const relatedCategorias = await getEntries(post.data.relatedCategorias)
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const shareButtons = [BlueskyShareButton]
---

<BasicLayout
  title={siteTitle + " | " + post.data.titulo}
  description={post.data.descricao}
  url={canonicalURL.href}
>
  <article
    class={css({
      pt: "40px",
    })}
  >
    <header>
      <div
        class={css({
          textStyle: "graySmallLabel",
        })}
      >
        {post.data.data_publicacao.toLocaleDateString("pt-BR")}
      </div>
      <h1
        class={css({
          textStyle: "h1Title",
          color: post.data.offline ? "gray.400" : "basicText",
        })}
      >
        {post.data.titulo}
      </h1>
      <div
        class={css({
          textStyle: "graySmallLabel",
          mb: "5px",
        })}
      >
        {post.data.offline ? "(Este post est√° offline.)" : ""}
      </div>

      <div class={css({ textStyle: "graySmallLabel" })}>
        {
          relatedCategorias.map(function (categoria, index) {
            // prettier-ignore
            //  (to avoid white-spaces in the inline element below)
            return (
                <span>{index ? ", " : ""}<a class={css({ textDecoration: "underline" })} href={`/categoria/${categoria.id}`}>{categoria.data.titulo}</a></span>
              )
          })
        }
      </div>
    </header>
    <div
      class={css({
        textStyle: "article",
        color: "basicText",
        mt: "20px",
      })}
    >
      <Content />
    </div>
  </article>
  <div class={flex({ my: "40px", gap: "10px" })}>
    <span
      class={css({
        textStyle: "graySmallLabel",
      })}>compartilhe:</span
    >
    <SocialShare
      buttons={shareButtons}
      description={post.data.descricao}
      title={post.data.titulo}
    />
  </div>
</BasicLayout>

<slot name="astro-social-share-css">
  <style is:global>
    .astro-social-share {
      margin: 0;
    }
    .astro-social-share svg {
      fill: var(--colors-basic-text);
    }
  </style>
</slot>
