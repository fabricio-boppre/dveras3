---
import BasicLayout from "@layouts/basicLayout.astro"
import PaginationNav from "@components/PaginationNav.astro"
import { css } from "@styled-system/css"
import { flex } from "@styled-system/patterns"
import { getCollection, getEntries, getEntry, render } from "astro:content"
import "@fontsource-variable/roboto-serif"

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

// We use getStaticPaths() to divide the post collection for each category and paginate them:
// - https://docs.astro.build/en/reference/routing-reference/#paginate
export const getStaticPaths = async ({ paginate }) => {
  // Get all entries from blog collection (except the offline) and sort them by date:
  const posts = (
    await getCollection("blogCollection", ({ data }) => {
      return data.offline !== true
    })
  ).sort(
    (a, b) =>
      b.data.data_publicacao.getTime() - a.data.data_publicacao.getTime(),
  )
  // Get all entries from categorias collection:
  const categorias = await getCollection("categoriasCollection")
  const simplerCategories = categorias.map((categoria) => categoria.id)

  // Now let's prepare the props: for each category, we insert into filteredPosts just the posts that include it:
  return simplerCategories.flatMap((categoria) => {
    var filteredPosts = new Array()
    posts.map((post) => {
      for (var i = 0; i < post.data.relatedCategorias.length; i++) {
        if (post.data.relatedCategorias[i].id == categoria) {
          filteredPosts.push(post)
          break
        }
      }
    })
    // Return paginated collections segmented by category:
    return paginate(filteredPosts, {
      params: { id: categoria },
      pageSize: 15,
    })
  })
}
// For a specific page, we send the page prop, which contains posts data and pagination information for this page, and we also send the current category information:
// - https://docs.astro.build/en/reference/routing-reference/#@he-pagination-page-prop
const { page } = Astro.props
const postsPerPage = page.data
const estaCategoria = await getEntry("categoriasCollection", Astro.params.id)
---

<BasicLayout
  title={"dveras em rede | " + estaCategoria?.data.titulo}
  description={'Posts da categoria "' + estaCategoria?.data.titulo + '"'}
  url={canonicalURL.href}
>
  <h1
    class={css({
      textStyle: "h1Title",
      color: "basicText",
      pt: "40px",
    })}
  >
    Posts da categoria "{estaCategoria?.data.titulo}"
  </h1>
  {
    postsPerPage.map(async function (post) {
      const { Content } = await render(post)
      const relatedCategories = await getEntries(post.data.relatedCategorias)
      return (
        <article
          class={css({
            "&:last-child": { pb: "40px" },
            pt: "40px",
          })}
        >
          <header>
            <div
              class={css({
                textStyle: "graySmallLabel",
              })}
            >
              {post.data.data_publicacao.toLocaleDateString("pt-BR")}
            </div>
            <h2
              class={css({
                textStyle: "h2Title",
                color: "basicText",
              })}
            >
              <a href={`/blog/${post.id}`}>{post.data.titulo}</a>
            </h2>
            <div class={css({ textStyle: "graySmallLabel" })}>
              {relatedCategories.map(function (categoria, index) {
                // prettier-ignore
                //  (to avoid white-spaces in the inline element below)
                return (
                <span>{index ? ", " : ""}<a class={css({ textDecoration: "underline" })} href={`/categoria/${categoria.id}`}>{categoria.data.titulo}</a></span>
              )
              })}
            </div>
          </header>
        </article>
      )
    })
  }
  <PaginationNav page={page} />
</BasicLayout>
