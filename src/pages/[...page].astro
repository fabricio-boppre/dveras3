---
import BasicLayout from "@layouts/basicLayout.astro"
import { css } from "@styled-system/css"
import { flex } from "@styled-system/patterns"
import { getCollection, getEntries, render } from "astro:content"
import type { GetStaticPaths } from "astro"
import "@fontsource-variable/roboto-serif"

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

// We use getStaticPaths() to divide the post collection into separate pages:
// - https://docs.astro.build/en/reference/routing-reference/#paginate
export const getStaticPaths = (async ({ paginate }) => {
  // Get all entries from blog collection (except the offline) and sort them by date:
  const posts = (
    await getCollection("blogCollection", ({ data }) => {
      return data.offline !== true
    })
  ).sort(
    (a, b) =>
      b.data.data_publicacao.getTime() - a.data.data_publicacao.getTime(),
  )

  // Return a paginated collection of paths for all items
  return paginate(posts, { pageSize: 15 })
}) satisfies GetStaticPaths

// For a specific page, we send the page prop, which contains posts data and pagination information for this page:
// - https://docs.astro.build/en/reference/routing-reference/#@he-pagination-page-prop
const { page } = Astro.props
const postsPerPage = page.data
---

<BasicLayout
  title="dveras em rede"
  description="Jornalista, ciclista, antifascista. Colaboro com o Valor Econômico e o Grupo Report. Recifense em Floripa."
  url={canonicalURL.href}
>
  {
    postsPerPage.map(async function (post) {
      const { Content } = await render(post)
      const relatedCategories = await getEntries(post.data.relatedCategorias)
      return (
        <article
          class={css({
            "&:not(&:last-child)": { borderBottom: "1px solid gray" },
            py: "40px",
          })}
        >
          <header>
            <div
              class={css({
                textStyle: "graySmallLabel",
              })}
            >
              {post.data.data_publicacao.toLocaleDateString("pt-BR")}
            </div>
            <h1
              class={css({
                textStyle: "h1Title",
                color: "basicText",
              })}
            >
              <a href={`/blog/${post.id}`}>{post.data.titulo}</a>
            </h1>
            <div class={css({ textStyle: "graySmallLabel" })}>
              {relatedCategories.map(function (categoria, index) {
                // prettier-ignore
                //  (to avoid white-spaces in the inline element below)
                return (
                <span>{index ? ", " : ""}<a class={css({ textDecoration: "underline" })} href={`/categoria/${categoria.id}`}>{categoria.data.titulo}</a></span>
              )
              })}
            </div>
          </header>
          <div
            class={css({
              textStyle: "article",
              color: "basicText",
              mt: "20px",
            })}
          >
            {post.data.modo_exibicao_index == "descricao" ? (
              <p>{post.data.descricao}</p>
            ) : post.data.modo_exibicao_index == "post_completo" ? (
              <Content />
            ) : (
              <img src={post.data.imagem_ilustrativa} alt={post.data.titulo} />
            )}
          </div>
        </article>
      )
    })
  }
  {
    page.lastPage > 1 && (
      <nav
        class={flex({
          py: "30px",
          flexDirection: ["column", "row"],
          "& div": {
            w: ["auto", "50%"],
            "& a": {
              my: "10px",
              bgColor: "buttonBg",
              display: "inline-block",
              p: "10px 20px",
              borderRadius: "lg",
              textStyle: "headerAndFooter",
              _hover: {
                bg: "buttonHoverBg",
              },
            },
          },
        })}
      >
        <div class={css({ textAlign: ["center", "left"] })}>
          {page.url.prev && <a href={page.url.prev}>&larr; anteriores</a>}
        </div>
        <div
          class={css({
            textAlign: ["center", "right"],
          })}
        >
          {page.url.next && <a href={page.url.next}>próximos &#8594;</a>}
        </div>
      </nav>
    )
  }
</BasicLayout>
