---
import BasicLayout from "@layouts/basicLayout.astro"
import PaginationNav from "@components/PaginationNav.astro"
import config from "@config/config.json"
import { css } from "@styled-system/css"
import { getCollection, getEntries, render } from "astro:content"
import type { GetStaticPaths } from "astro"
import "@fontsource-variable/roboto-serif"

// We use getStaticPaths() to divide the post collection into separate pages:
// - https://docs.astro.build/en/reference/routing-reference/#paginate
export const getStaticPaths = (async ({ paginate }) => {
  // Get all entries from blog collection (except the offline) and sort them by date:
  const posts = (
    await getCollection("blogCollection", ({ data }) => {
      return data.offline !== true
    })
  ).sort(
    (a, b) =>
      b.data.data_publicacao.getTime() - a.data.data_publicacao.getTime(),
  )

  // Return a paginated collection of paths for all items
  return paginate(posts, { pageSize: config.pagination })
}) satisfies GetStaticPaths

// For a specific page, we send meta info, the page prop, which contains posts data and pagination information for this page:
// - https://docs.astro.build/en/reference/routing-reference/#@he-pagination-page-prop
const { page } = Astro.props
const postsPerPage = page.data
const siteTitle = config.siteTitle
const siteDescription = config.siteDescription
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
---

<BasicLayout
  title={siteTitle}
  description={siteDescription}
  url={canonicalURL.href}
>
  {
    postsPerPage.map(async function (post) {
      const { Content } = await render(post)
      const relatedCategories = await getEntries(post.data.relatedCategorias)
      return (
        <article
          class={css({
            "&:not(&:last-child)": { borderBottom: "1px solid gray" },
            py: "40px",
          })}
        >
          <header>
            <div
              class={css({
                textStyle: "graySmallLabel",
              })}
            >
              {post.data.data_publicacao.toLocaleDateString("pt-BR")}
            </div>
            <h1
              class={css({
                textStyle: "h1Title",
                color: "basicText",
              })}
            >
              <a href={`/blog/${post.id}`}>{post.data.titulo}</a>
            </h1>
            <div class={css({ textStyle: "graySmallLabel" })}>
              {relatedCategories.map(function (categoria, index) {
                // prettier-ignore
                //  (to avoid white-spaces in the inline element below)
                return (
                <span>{index ? ", " : ""}<a class={css({ textDecoration: "underline" })} href={`/categoria/${categoria.id}`}>{categoria.data.titulo}</a></span>
              )
              })}
            </div>
          </header>
          <div
            class={css({
              textStyle: "article",
              color: "basicText",
              mt: "20px",
            })}
          >
            {post.data.modo_exibicao_index == "descricao" ? (
              <p>{post.data.descricao}</p>
            ) : post.data.modo_exibicao_index == "post_completo" ? (
              <Content />
            ) : (
              <img src={post.data.imagem_ilustrativa} alt={post.data.titulo} />
            )}
          </div>
        </article>
      )
    })
  }
  <PaginationNav page={page} />
</BasicLayout>
