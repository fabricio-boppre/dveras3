---
import { css } from "@styled-system/css"
import { flex } from "@styled-system/patterns"
import IconAutoTheme from "@components/iconAutoTheme.svg"
import IconDarkTheme from "@components/iconDarkTheme.svg"
import IconLightTheme from "@components/iconLightTheme.svg"

const themeIconsStyles =
  "themeIcon " +
  css({
    display: "none",
    position: "absolute",
    fill: "currentColor",
    ml: "5px",
    "&.active": {
      display: "block",
    },
  })
---

<!-- Theme Select Component: https://astro-tips.dev/recipes/dark-mode/ -->
<label
  class={flex({
    ml: "20px",
    alignItems: "center",
  })}
  for="themeSelector"
>
  <span hidden>selector de tema</span>
  <IconAutoTheme class={themeIconsStyles} />
  <IconLightTheme class={themeIconsStyles} />
  <IconDarkTheme class={themeIconsStyles} />
  <div
    class={css({
      position: "relative",
      _before: {
        layerStyle: "themeSelectorBeforeAfterStyles",
        borderBottomWidth: "themeSelectorArrowWidth",
        borderBottomStyle: "solid",
        borderBottomColor: "basicText",
        top: "33%",
      },
      _after: {
        layerStyle: "themeSelectorBeforeAfterStyles",
        borderTopWidth: "themeSelectorArrowWidth",
        borderTopStyle: "solid",
        borderTopColor: "basicText",
        top: "56%",
      },
    })}
  >
    <select
      class={css({
        bgColor: "transparent",
        appearance: "none",
        px: "32px 22px",
        cursor: "pointer",
        pb: "headerOptionsPaddingBottom",
        "& option": {
          bgColor: "mainBg",
        },
      })}
      id="themeSelector"
      name="theme-selector"
      transition:persist
    >
      <option value="auto">auto</option>
      <option value="light">claro</option>
      <option value="dark">escuro</option>
    </select>
  </div>
</label>

<script is:inline>
  const selector = document.getElementById("themeSelector")

  // On changing the theme via selector:
  selector.onchange = (event) => {
    // Deactivate the current icon theme:
    document.querySelector(".active").classList.remove("active")
    // Activate the new icon theme:
    activateIcon(event.target.value)
    // Set the new theme:
    theme.setTheme(event.target.value)
  }

  // On opening the page, update the theme selector and icon:
  updateSelectedTheme()

  // On changing the theme via browser, update the theme selector and icon:
  document.addEventListener("theme-changed", (event) => {
    updateSelectedTheme(event.detail.theme)
  })

  // Function that update the theme selector and icon:
  function updateSelectedTheme(newTheme = theme.getTheme()) {
    activateIcon(newTheme)
    selector.value = newTheme
  }

  // Function that activate the theme icon:
  function activateIcon(theme) {
    document
      .querySelector('[data-theme-code="' + theme + '"]')
      .classList.add("active")
  }
</script>
